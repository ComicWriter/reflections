What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, you're creating the space for that repository and it will have the global variables you've established.


*****************

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different from the working directory and the repository in that you've taken files from the working directory and made changes to them. You've now altered the previous snapshot that still exists in the repository. The staging area shows that you've made changes but you haven't added them to the repository yet...perhaps because you've gone other files to change that accompany the changes you've made in the first file/s...so that you can submit a logical change to the repository when you're ready.

**************

How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to make sure you have one commit per logical change by using git diff to check the difference between the staging area and the last commit.

******************

What are some situations when branches would be helpful in keeping your history organized? How would branches help?


Some situations when branches would be helpful in keeping your history organized are when you want to try some experimental code or features without affecting your main code.

Branches would let you label those features you need to keep separate while you're trying them out.


***********

How do the diagrams help you visualize the branch structure?

Diagrams help you to understand where a branch has left the master, what features are not included in the master, and whether there are branches off the branches.



***************

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together means that all the commits of each branch are now available, interspersed by the time they were committed, in one single branch.

We represent it in the diagram as coming back together to show that it is now one branch.


************



What are the pros and cons of Git's automatic merging vs. always doing merges manually?

The pros of Git's automatic merging is that there's less likelihood of forgetting to merge branches that you wanted to merge.

The cons are that Git can't tell which change you want as your final one if you have two commits in two branches that act on the same code.
