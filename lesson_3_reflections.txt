Q. When would you want to create a remote repository rather than keeping all your work local?



A. When you need to access that repository from many computers or when you have many people working on the project who need to access the project.

******

Manual vs. automatic pull

Q. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A. You may be working on something that will break if you introduce code that is ahead of a feature you're currently working on. In that case, you wouldn't want your local repository up to date with a remote repository (that may be being worked on by others).


******

Forks, Clones, and Branches

Q. Describe the differences between forks, clones, and branches.  When would you use one instead of another?

A. Fork: You are creating a copy of a GitHub repository to your own profile on GitHub. A fork gives the original creators credit for their work and they can see that you've made a copy. The Fork that now exists as a repository on your profile is the code from that original project at that point in time. You would fork if you're using someone else's code as a base; if you have several remote teammates.

Clone: A cloned repository is a copy of a repository from GitHub to your local machine or a copy of repository on your own local machine and you want a double of that repository. You would use cloning on GitHub to take that base repository and have your own working copy on your local machine. Do this if you don't need to credit anyone's work or you want a back up copy.

Branches: is a string of commits that make up a unit. It may be the entire repository or it may just be a part of repository. You use branches when you're wanting to add your commits to GitHub or when you want to bring those commits to your local machine.


******

Q. What is the benefit of having a copy of the last known state of the remote stored locally?

A. 


******

Q. How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

A. 


******

Q. When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

A. 